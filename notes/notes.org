* General
** DONE Give each experiment its own resource folder
   CLOSED: [2020-10-12 Mon 09:51]
   - But maybe it's ok to use a communal one.
** TODO Split up the omnibus data files before data cleaning so that everything isn't rerun after every new import
** Prolific
   - Don't recruit multiple versions of the same study at once
     - You can't set exclusions for studies that haven't been 'completed'
* Alignment
** TODO Experiment 8
    - Let's try work backwards:
    - Eventually we need to make a call to `trial_survey_multi_choice`, which creates timeline variables using `set_parameters`.
    - So each iteration of the loop should have a list of two for the two displays
    - I guess we can do everything in tibbles and then in the end nest the two displays (for reliability amount) in the end
      - And convert the two rows to a list
    - So everything can be on big tibble with the following variable columns:
      - Alignment condition
      - Reliability type 
      - Project variation
        - Low alignment: intrinsic features
        - High alignment: project type
    - Then supposedly, filtering that down (and passing the relevant column value to display_if for condition) will get you the two displays for each combination
      - but actually it wouldn't be filtering, it would be stepping down each row and pulling the 'parameters'
    - Actually configuring the two reliability amount displays isn't that easy
      - They need different NPVs
      - Also, they need five new project descriptions
    - New issue
      - You ran Aggregation Experiment 3b (high alignment top up) with the Experiment 4 link.
      - So not the end of the world, but now what you probably need to do is to hard code those three IDs out of Experiment 4 prolific ID generation.
*** DONE Counterbalancing
    CLOSED: [2020-10-08 Thu 16:40]
    - Project variation
      - But this is randomised
    - Project name
      - Is it really just project name that needs latin square?
    - Also order of the values in each table, I guess.
      - Or maybe it's enough to just change the order of values, and we don't care so much about the order of the names
    - Ok so project name was definitely not as easy as I thought.
      - Maybe because of the alignment differences
      - So we're now going to try do it after everything
    - That worked fine
      - But might lead to errors when getting input data through, so pay attention.
    - And column order
    - We're currently on 12MB, so likely will need to revisit this and add column shuffling on the JS end
*** DONE Inputs
    CLOSED: [2020-10-09 Fri 11:50]
*** TODO Fix project aesthetics [4/5]
    - [X] Heading names in the final table
    - [X] Multiplier values
      - [X] Actual values
      - [X] Rounding
        - Done automatically due to the integer conversion
    - [ ] Allocation and ranking labels
      - Might be too hard to bother
    - [X] Business names
    - [X] Table width
*** DONE Make sure projects are different between displays
    CLOSED: [2020-10-12 Mon 18:13]
    - Different NPVs
    - Different projects for low alignment?
    - I guess you can do like in aggregation and sample pairs from the set of different projects
    - But what we can do is have "display A" and "display B"
      - And only five projects can appear in A and the other five in B
      - And we just randomise the order in jspsych
      - But then we're associating certain projects with low or high reliability
    - Instead we'd have to sample pairs like we said before
    - I guess it's a low vs high alignment issue again
      - With low alignment we can just have one of two variations
        - That is, either display A or B for low or high reliability
      - With high alignment that's where we might need to sample
      - Or not!
    - What if we just have a "project_display_variation" type of variable
      - And then within the variation of the display set, for high alignment you have the standard project_variation condition
      - So then I guess you're "merely" multiplying the conditions by two.
      - Add it at the beginning when adding project content
      - Then in the end nest the columns such that you get a tibble with a high and low reliability_amount column, a project_display_variation column that is `c(1,2)`, and the table contents
        - Supposedly then you'd have cases in which each display variation is associated with each reliability amount
*** DONE Catch trials [2/2]
    CLOSED: [2020-10-17 Sat 12:51]
    - Can think of three types
      - Instructions check
      - Attention check
      - "Honesty check" (from [[https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6753310/#__sec25title][here]])
    - For the instructions check we can ask them which NPV is better
    - For attention check can be a trial between the two displays
      - Actually can be one before each display
      - "You will now see the first project display. It is important that you pay attention. Click the following checkbox before continuing on to the next page: [ ]. Please read through and complete the task accordingly."
    - Maybe also include a captcha?
      - Currently not working
      - Update: unlikely to happen, because requires update of psych server code
    - [[https://blog.prolific.co/how-to-improve-your-data-quality/][This article]] has a bunch of suggestions
      - And [[https://blog.prolific.co/minimising-noise-and-maximising-your-data-quality-the-case-of-satisficing/][here]]
    - Can also add something saying that you will get payment regardless of performance etc.
    - Let's reject if they get the NPV question and mid study attention check wrong
    - [X] Instructions check
    - [X] Attention check
*** DONE Generate the tables in JS
    CLOSED: [2020-10-10 Sat 15:43]
    - Will help with column order counterbalancing
      - And display pairs
    - So we just create the vectors/columns/whatever in R
      - Then jspsych takes them, shuffles, and puts them into a table from a function.
      - So we make a function whose argument is something like a vector of the columns/rows
        - And then the function itself already has the project and row names
        - The shuffling occurs in the function
    - So here's what you do:
      - Send to jspsych 1. an array of length five project columns, with each column as a vector (of 6 rows) in the array, 2. a vector for the header, 3. a vector for the row name column. For each table. Already in the function call.
      - Function steps:
        1. Shuffle the five vectors (columns)
        2. Add row name vector to the end of the array
        3. Transpose so that the rows are now columns
        4. Add header name vector
        5. Convert the new array of 6x6 into an HTML table
    - Would this help with display pairs?
      - Probably not actually
      - But what we can do is have "display A" and "display B"
        - And only five projects can appear in A and the other five in B
        - And we just randomise the order in jspsych
        - But then we're associating certain projects with low or high reliability
      - Instead we'd have to sample pairs like we said before
*** DONE Add reliability amount condition to input IDs
    CLOSED: [2020-10-17 Sat 13:38]
*** TODO Reanalyse old data using new techniques [0/4]
    - [ ] difference
    - [ ] mixed effect
    - [ ] covariate
    - [ ] five regression
*** TODO Add explanation of allocation task
    - Either in instructions or as preamble
*** TODO Generate test data
    - For some reason it isn't showing up with webdriver
    - But it has something to do with the main code, because welcome page works by itself
    - Also you changed around the experiment files for aggregation 4 and the resources for it
    - mock data files have also been edited a bit
* Emacs wishlist
** TODO Spotify
** DONE combine ESS configs
   CLOSED: [2020-10-20 Tue 10:05]
** TODO Work out how to work with the additional ESS config
   - That is, do we keep it in the layer, or user-config, or private layer?
** DONE Elaborate on syntax highlighting question
  CLOSED: [2020-10-03 Sat 19:00]
** TODO Figure out listviewer
** TODO Figure out ess-r-view-data
** TODO Line wrap without breaking up words
** TODO Evernote
** DONE Automatically start R REPL in project root
   CLOSED: [2020-10-20 Tue 10:08]
   - Looks like it's a feature-not-bug situation
   - You want to be asked, because otherwise there isn't an easy way of determining
   - RStudio has their .Rproj files, but it seems ESS doesn't want to do that
** TODO Get graphics device in buffer
** TODO Format while typing
