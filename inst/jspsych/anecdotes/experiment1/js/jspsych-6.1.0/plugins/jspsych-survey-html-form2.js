/**
 * jspsych-survey-html-form2
 * a jspsych plugin for free html forms
 *
 * Jan Simson
 *
 * documentation: docs.jspsych.org
 *
 */

jsPsych.plugins['survey-html-form2'] = (function() {

  var plugin = {};

  plugin.info = {
    name: 'survey-html-form2',
    description: '',
    parameters: {
      html: {
        type: jsPsych.plugins.parameterType.HTML_STRING,
        pretty_name: 'HTML',
        default: null,
        description: 'HTML formatted string containing all the input elements to display. Every element has to have its own distinctive name attribute. The <form> tag must not be included and is generated by the plugin.'
      },
      preamble: {
        type: jsPsych.plugins.parameterType.STRING,
        pretty_name: 'Preamble',
        default: null,
        description: 'HTML formatted string to display at the top of the page above all the questions.'
      },
      button_label: {
        type: jsPsych.plugins.parameterType.STRING,
        pretty_name: 'Button label',
        default:  'Continue',
        description: 'The text that appears on the button to finish the trial.'
      },
      dataAsArray: {
        type: jsPsych.plugins.parameterType.BOOLEAN,
        pretty_name: 'Data As Array',
        default:  false,
        description: 'Retrieve the data as an array e.g. [{name: "INPUT_NAME", value: "INPUT_VALUE"}, ...] instead of an object e.g. {INPUT_NAME: INPUT_VALUE, ...}.'
      }
    }
  }

  plugin.trial = function(display_element, trial) {
    
    var html = '';
    // show preamble text
    if(trial.preamble !== null){
      html += '<div id="jspsych-survey-html-form2-preamble" class="jspsych-survey-html-form2-preamble">'+trial.preamble+'</div>';
    }
    // start form
    html += '<form id="jspsych-survey-html-form2">'

    // add form HTML / input elements
    html += trial.html;

    // add submit button
    html += '<p><input type="submit" id="jspsych-survey-html-form2-next" class="jspsych-btn jspsych-survey-html-form2" value="'+trial.button_label+'"></input></p>';

    html += '</form>'
    display_element.innerHTML = html;

    display_element.querySelector('#jspsych-survey-html-form2').addEventListener('submit', function(event) {
      // don't submit form
      event.preventDefault();
      
      function sum_check(a, b) {
          if (a === b) return false;
          if (a === null || b === null) return true;
          if (a.length != b.length) return true;
          for (var i = 0; i < a.length; ++i) {
            if (a[i] !== b[i]) return true;
          }
          return false;
        }
    
      if (trial.preamble.includes("TEST")) {
        // measure response time
        var endTime = performance.now();
        var response_time = endTime - startTime;
  
        var question_data = serializeArray(this);
  
        if (!trial.dataAsArray) {
          question_data = objectifyForm(question_data);
        }
  
        // save data
        var trialdata = {
          "rt": response_time,
          "responses": JSON.stringify(question_data)
        };
  
        display_element.innerHTML = '';
  
        // next trial
        jsPsych.finishTrial(trialdata);
      } else if (trial.preamble.includes("2")) {
        // only submit if form allocation project pair values sum to 100 - high alignment
        var cond_names = display_element.querySelector('#jspsych-survey-html-form2').querySelectorAll('[name]');
        var proj_all = [];
        for (var l = 0; l < cond_names.length; l++) {
          var regex = /^(.*)_cond/;
          var proj_name = regex.exec(cond_names[l].name)[1];
          proj_all.push(proj_name);
        }
        var proj_unique = [...new Set(proj_all)];
        
        var sum_high = 0;
        var sum_array = [];
        for (var m = 0; m < proj_unique.length; m++) {
          var name_match = '[name*="' + proj_unique[m] + '_cond_allocation"]';
          var allocation_vals_high = display_element.querySelector('#jspsych-survey-html-form2').querySelectorAll(name_match);
          sum_high = sum_high + Number(allocation_vals_high[0].value) + Number(allocation_vals_high[1].value);
          sum_array.push(sum_high);
          sum_high = 0;
        }
        var sum_correct = [100, 100, 100, 100];
        
        // only submit if form ranking project pair values are 1-2 - high alignment
        //var ranking_vals_high = display_element.querySelector('#jspsych-survey-html-form2').querySelectorAll('[name*="ranking"]');
        var rank_high = [];
        var rank_test = 0;
        for (var n = 0; n < proj_unique.length; n++) {
          var name_match_rank = '[name*="' + proj_unique[n] + '_cond_ranking"]';
          var ranking_vals_high = display_element.querySelector('#jspsych-survey-html-form2').querySelectorAll(name_match_rank);
          rank_high.push(Number(ranking_vals_high[0].value), Number(ranking_vals_high[1].value));
          if (new Set(rank_high).size != 2) {
            rank_temp = 1;
          } else {
            rank_temp = 0;
          }
          rank_test = rank_test + rank_temp;
          rank_high = [];
        }
        
        if (sum_check(sum_array, sum_correct)){
          msg = "Each project pair's budget must sum to 100";
          alert(msg);
          } else if (rank_test !== 0) {
            var rank_msg = "You cannot repeat rankings within each project pair. Number of repeated ranks: " + rank_test;
            alert(rank_msg);
          } else {
            // measure response time
            var endTime = performance.now();
            var response_time = endTime - startTime;
      
            var question_data = serializeArray(this);
      
            if (!trial.dataAsArray) {
              question_data = objectifyForm(question_data);
            }
      
            // save data
            var trialdata = {
              "rt": response_time,
              "responses": JSON.stringify(question_data)
            };
      
            display_element.innerHTML = '';
      
            // next trial
            jsPsych.finishTrial(trialdata);
          }
      } else if (trial.preamble.includes("8")) {
      // only submit if form allocation values sum to 100 - low alignment
      var allocation_vals = display_element.querySelector('#jspsych-survey-html-form2').querySelectorAll('[name*="allocation"]');
      var sum = 0;
      for (var j = 0; j < allocation_vals.length; j++) {
        sum = sum + Number(allocation_vals[j].value);
      }
      
      // only submit if form ranking values are 1-8 - low alignment
      var ranking_vals = display_element.querySelector('#jspsych-survey-html-form2').querySelectorAll('[name*="ranking"]');
      var rank = [];
      for (var k = 0; k < ranking_vals.length; k++) {
        rank.push(Number(ranking_vals[k].value));
      }
    
      if (sum != 400) {
        var message = "The current sum of budget allocation across all projects is " + sum + ". Budget allocation must sum to 400.";
        alert(message);
        return false;
      } else if (new Set(rank).size != 8) {
        alert("Each project's rank must be unique. Currently, one or more ranks are repeated.");
      } else {
        // measure response time
        var endTime = performance.now();
        var response_time = endTime - startTime;
  
        var question_data = serializeArray(this);
  
        if (!trial.dataAsArray) {
          question_data = objectifyForm(question_data);
        }
  
        // save data
        var trialdata = {
          "rt": response_time,
          "responses": JSON.stringify(question_data)
        };
  
        display_element.innerHTML = '';
  
        // next trial
        jsPsych.finishTrial(trialdata);
      }
        
      }
      
    });

    var startTime = performance.now();
  };

  /*!
   * Serialize all form data into an array
   * (c) 2018 Chris Ferdinandi, MIT License, https://gomakethings.com
   * @param  {Node}   form The form to serialize
   * @return {String}      The serialized form data
   */
  var serializeArray = function (form) {
    // Setup our serialized data
    var serialized = [];

    // Loop through each field in the form
    for (var i = 0; i < form.elements.length; i++) {
      var field = form.elements[i];

      // Don't serialize fields without a name, submits, buttons, file and reset inputs, and disabled fields
      if (!field.name || field.disabled || field.type === 'file' || field.type === 'reset' || field.type === 'submit' || field.type === 'button') continue;

      // If a multi-select, get all selections
      if (field.type === 'select-multiple') {
        for (var n = 0; n < field.options.length; n++) {
          if (!field.options[n].selected) continue;
          serialized.push({
            name: field.name,
            value: field.options[n].value
          });
        }
      }

      // Convert field data to a query string
      else if ((field.type !== 'checkbox' && field.type !== 'radio') || field.checked) {
        serialized.push({
          name: field.name,
          value: field.value
        });
      }
    }

    return serialized;
  };

  // from https://stackoverflow.com/questions/1184624/convert-form-data-to-javascript-object-with-jquery
  function objectifyForm(formArray) {//serialize data function
    var returnArray = {};
    for (var i = 0; i < formArray.length; i++){
      returnArray[formArray[i]['name']] = formArray[i]['value'];
    }
    return returnArray;
  }

  return plugin;
})();
